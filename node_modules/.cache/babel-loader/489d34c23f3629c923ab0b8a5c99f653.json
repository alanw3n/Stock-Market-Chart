{"ast":null,"code":"var _jsxFileName = \"/Users/alanwen/Desktop/React/Memes/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: {},\n      x_val: [],\n      y_val: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=TIME_SERIES_INTRADAY&symbol=MSFT\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    }).then(response => response.json()).then(response => {\n      let x = response['Time Series(5min)'][key].map(data => {\n        return data['1. open'];\n      });\n      this.setState({\n        data: response\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Plot, {\n      data: [{\n        x: [1, 2, 3],\n        y: [2, 6, 3],\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }, {\n        type: 'bar',\n        x: [1, 2, 3],\n        y: [2, 5, 3]\n      }],\n      layout: {\n        width: 700,\n        height: 500,\n        title: 'A Fancy Plot'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alanwen/Desktop/React/Memes/src/App.js"],"names":["React","Component","Plot","App","constructor","state","data","x_val","y_val","componentDidMount","fetch","then","response","json","x","key","map","setState","render","y","type","mode","marker","color","width","height","title"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;AAGA,MAAMC,GAAN,SAAkBF,SAAlB,CAA2B;AACzBG,EAAAA,WAAW,GAAE;AACX;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,KAAK,CAAC,sIAAD,EAAyI;AAC5I,gBAAU,KADkI;AAE5I,iBAAW;AACT,2BAAmB,8BADV;AAET,0BAAkB;AAFT;AAFiI,KAAzI,CAAL,CAOGC,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPpB,EAQGF,IARH,CAQQC,QAAQ,IAAI;AAChB,UAAIE,CAAC,GAAGF,QAAQ,CAAC,mBAAD,CAAR,CAA8BG,GAA9B,EAAmCC,GAAnC,CAAuCV,IAAI,IAAG;AACpD,eAAOA,IAAI,CAAC,SAAD,CAAX;AACD,OAFO,CAAR;AAGA,WAAKW,QAAL,CAAc;AAACX,QAAAA,IAAI,EAAEM;AAAP,OAAd;AACD,KAbH;AAcD;;AAEDM,EAAAA,MAAM,GAAE;AACN,wBACE,oBAAC,IAAD;AACA,MAAA,IAAI,EAAE,CACJ;AACEJ,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADL;AAEEK,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFL;AAGEC,QAAAA,IAAI,EAAE,SAHR;AAIEC,QAAAA,IAAI,EAAE,eAJR;AAKEC,QAAAA,MAAM,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR;AALV,OADI,EAQJ;AAACH,QAAAA,IAAI,EAAE,KAAP;AAAcN,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;AAA4BK,QAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAA/B,OARI,CADN;AAWA,MAAA,MAAM,EAAG;AAACK,QAAAA,KAAK,EAAE,GAAR;AAAaC,QAAAA,MAAM,EAAE,GAArB;AAA0BC,QAAAA,KAAK,EAAE;AAAjC,OAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD;;AAvCwB;;AA0C3B,eAAevB,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {data: {}, x_val: [], y_val: []}\n  }\n\n  componentDidMount(){\n    fetch(\"https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=TIME_SERIES_INTRADAY&symbol=MSFT\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    })\n      .then(response => response.json())\n      .then(response => {\n        let x = response['Time Series(5min)'][key].map(data =>{\n          return data['1. open']\n        })\n        this.setState({data: response})\n      })\n  }\n\n  render(){\n    return(\n      <Plot\n      data={[\n        {\n          x: [1, 2, 3],\n          y: [2, 6, 3],\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: {color: 'red'},\n        },\n        {type: 'bar', x: [1, 2, 3], y: [2, 5, 3]},\n      ]}\n      layout={ {width: 700, height: 500, title: 'A Fancy Plot'} }\n    />\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}