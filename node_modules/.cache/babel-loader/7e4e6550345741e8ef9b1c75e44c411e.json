{"ast":null,"code":"var _jsxFileName = \"/Users/alanwen/Desktop/React/Memes/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      equityName: \"\",\n      timeSeries: \"\",\n      x_val: [],\n      open: [],\n      high: [],\n      low: [],\n      close: []\n    };\n    this.updateGraph = this.updateGraph.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  updateGraph() {\n    fetch(`https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=${this.state.timeSeries}&symbol=${this.state.equityName}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      let x_array = [];\n      let open_array = [];\n      let high_array = [];\n      let low_array = [];\n      let close_array = [];\n\n      for (var key in data['Time Series (5min)']) {\n        x_array.push(key);\n        open_array.push(data['Time Series (5min)'][key]['1. open']);\n        high_array.push(data['Time Series (5min)'][key]['2. high']);\n        low_array.push(data['Time Series (5min)'][key]['3. low']);\n        close_array.push(data['Time Series (5min)'][key]['4. close']);\n      }\n\n      this.setState({\n        x_val: x_array,\n        open: open_array,\n        high: high_array,\n        low: low_array,\n        close: close_array\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.updateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"equityName\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.equityName,\n      placeholder: \"Type Equity Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"timeSeries\",\n      value: this.state.timeSeries,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, \"-- Please select a time series --\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TIME_SERIES_INTRADAY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Intraday\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TIME_SERIES_DAILY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"Daily\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TIME_SERIES_WEEKLY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, \"Weekly\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TIME_SERIES_MONTHLY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"Monthly\")), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(Plot, {\n      className: \"plot\",\n      data: [{\n        x: this.state.x_val,\n        open: this.state.open,\n        high: this.state.high,\n        low: this.state.low,\n        close: this.state.close,\n        type: 'candlestick',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }],\n      layout: {\n        width: 700,\n        height: 500,\n        title: 'A Fancy Plot'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alanwen/Desktop/React/Memes/src/App.js"],"names":["React","Component","Plot","App","constructor","state","equityName","timeSeries","x_val","open","high","low","close","updateGraph","bind","handleChange","event","name","value","target","setState","fetch","then","response","json","data","console","log","x_array","open_array","high_array","low_array","close_array","key","push","render","x","type","mode","marker","color","width","height","title"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {equityName: \"\", timeSeries: \"\", x_val: [], open: [], high: [], low: [], close: []}\n    this.updateGraph = this.updateGraph.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event){\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  updateGraph(){\n    fetch(`https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=${this.state.timeSeries}&symbol=${this.state.equityName}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        let x_array = []\n        let open_array = []\n        let high_array = []\n        let low_array = []\n        let close_array = []\n        for(var key in data['Time Series (5min)']){\n          x_array.push(key)\n          open_array.push(data['Time Series (5min)'][key]['1. open'])\n          high_array.push(data['Time Series (5min)'][key]['2. high'])\n          low_array.push(data['Time Series (5min)'][key]['3. low'])\n          close_array.push(data['Time Series (5min)'][key]['4. close'])\n        }\n        this.setState({x_val: x_array, open: open_array, high: high_array, low: low_array, close: close_array})\n      })\n  }\n\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.updateGraph}>\n          <input name=\"equityName\" type=\"text\" onChange={this.handleChange} value={this.state.equityName} \n          placeholder=\"Type Equity Name\"/>\n          <select name=\"timeSeries\" value={this.state.timeSeries} onChange={this.handleChange}>\n            <option value=\"\">-- Please select a time series --</option>\n            <option value=\"TIME_SERIES_INTRADAY\">Intraday</option>\n            <option value=\"TIME_SERIES_DAILY\">Daily</option>\n            <option value=\"TIME_SERIES_WEEKLY\">Weekly</option>\n            <option value=\"TIME_SERIES_MONTHLY\">Monthly</option>\n          </select>\n          <button>Submit</button>\n        </form>\n        <Plot className=\"plot\"\n        data={[\n          {\n            x: this.state.x_val,\n            open: this.state.open,\n            high: this.state.high,\n            low: this.state.low,\n            close: this.state.close,\n            type: 'candlestick',\n            mode: 'lines+markers',\n            marker: {color: 'red'},\n          },\n        ]}\n        layout={ {width: 700, height: 500, title: 'A Fancy Plot'} }\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}