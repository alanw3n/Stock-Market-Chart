{"ast":null,"code":"var _jsxFileName = \"/Users/alanwen/Desktop/React/Memes/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      equityName: \"\",\n      timeSeries: \"\",\n      x_val: [],\n      y_val: []\n    };\n    this.updateGraph = this.updateGraph.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://cdn.plot.ly/plotly-latest.min.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    this.updateGraph();\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  updateGraph() {\n    fetch(\"https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=TIME_SERIES_INTRADAY&symbol=MSFT\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      let x = [];\n      let y = [];\n\n      for (var key in data['Time Series (5min)']) {\n        x.push(key);\n        y.push(data['Time Series (5min)'][key]['1. open']);\n      }\n\n      this.setState({\n        x_val: x,\n        y_val: y\n      });\n    });\n  }\n\n  render() {\n    {\n      var trace1 = {\n        x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'],\n        close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995],\n        decreasing: {\n          line: {\n            color: '#7F7F7F'\n          }\n        },\n        high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004],\n        increasing: {\n          line: {\n            color: '#17BECF'\n          }\n        },\n        line: {\n          color: 'rgba(31,119,180,1)'\n        },\n        low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995],\n        open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004],\n        type: 'candlestick',\n        xaxis: 'x',\n        yaxis: 'y'\n      };\n      var data = [trace1];\n      var layout = {\n        dragmode: 'zoom',\n        margin: {\n          r: 10,\n          t: 25,\n          b: 40,\n          l: 60\n        },\n        showlegend: false,\n        xaxis: {\n          autorange: true,\n          domain: [0, 1],\n          range: ['2017-01-03 12:00', '2017-02-15 12:00'],\n          rangeslider: {\n            range: ['2017-01-03 12:00', '2017-02-15 12:00']\n          },\n          title: 'Date',\n          type: 'date'\n        },\n        yaxis: {\n          autorange: true,\n          domain: [0, 1],\n          range: [114.609999778, 137.410004222],\n          type: 'linear'\n        }\n      };\n      Plotly.newPlot('myDiv', data, layout);\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"equityName\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: this.state.equityName,\n      placeholder: \"Type Equity Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"timeSeries\",\n      value: this.state.timeSeries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"-- Please select a time series --\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Intraday\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Intraday\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Daily\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, \"Daily\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Monthly\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Monthly\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Yearly\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, \"Yearly\")), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"dataType\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Plot, {\n      className: \"plot\",\n      data: [{\n        x: this.state.x_val,\n        y: this.state.y_val,\n        type: 'scatter',\n        mode: 'lines+markers',\n        marker: {\n          color: 'red'\n        }\n      }, {\n        type: 'bar',\n        x: 'Time',\n        y: 'Highs'\n      }],\n      layout: {\n        width: 700,\n        height: 500,\n        title: 'A Fancy Plot'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alanwen/Desktop/React/Memes/src/App.js"],"names":["React","Component","Plot","App","constructor","state","equityName","timeSeries","x_val","y_val","updateGraph","bind","handleChange","componentDidMount","script","document","createElement","src","async","body","appendChild","event","name","value","target","setState","fetch","then","response","json","data","console","log","x","y","key","push","render","trace1","close","decreasing","line","color","high","increasing","low","open","type","xaxis","yaxis","layout","dragmode","margin","r","t","b","l","showlegend","autorange","domain","range","rangeslider","title","Plotly","newPlot","mode","marker","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Plot from 'react-plotly.js';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {equityName: \"\", timeSeries: \"\", x_val: [], y_val: []}\n    this.updateGraph = this.updateGraph.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount(){\n    const script = document.createElement(\"script\");\n\n    script.src = \"https://cdn.plot.ly/plotly-latest.min.js\";\n    script.async = true;\n\n    document.body.appendChild(script);\n    this.updateGraph();\n  }\n\n  handleChange(event){\n    const {name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  updateGraph(){\n    fetch(\"https://alpha-vantage.p.rapidapi.com/query?datatype=json&output_size=compact&interval=5min&function=TIME_SERIES_INTRADAY&symbol=MSFT\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"alpha-vantage.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"230d86db60msheb2e40d44790598p1915e2jsn5074c9944675\"\n      }\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        let x = []\n        let y = []\n        for(var key in data['Time Series (5min)']){\n          x.push(key)\n          y.push(data['Time Series (5min)'][key]['1. open'])\n        }\n        this.setState({x_val: x, y_val: y})\n      })\n  }\n\n  render(){\n    {\n      var trace1 = {\n  \n        x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'], \n        \n        close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995], \n        \n        decreasing: {line: {color: '#7F7F7F'}}, \n        \n        high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004], \n        \n        increasing: {line: {color: '#17BECF'}}, \n        \n        line: {color: 'rgba(31,119,180,1)'}, \n        \n        low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995], \n        \n        open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004], \n        \n        type: 'candlestick', \n        xaxis: 'x', \n        yaxis: 'y'\n      };\n      \n      var data = [trace1];\n      \n      var layout = {\n        dragmode: 'zoom', \n        margin: {\n          r: 10, \n          t: 25, \n          b: 40, \n          l: 60\n        }, \n        showlegend: false, \n        xaxis: {\n          autorange: true, \n          domain: [0, 1], \n          range: ['2017-01-03 12:00', '2017-02-15 12:00'], \n          rangeslider: {range: ['2017-01-03 12:00', '2017-02-15 12:00']}, \n          title: 'Date', \n          type: 'date'\n        }, \n        yaxis: {\n          autorange: true, \n          domain: [0, 1], \n          range: [114.609999778, 137.410004222], \n          type: 'linear'\n        }\n      };\n      \n      Plotly.newPlot('myDiv', data, layout);\n    }\n    return(\n      <div>\n        <form>\n          <input name=\"equityName\" type=\"text\" onChange={this.handleChange} value={this.state.equityName} \n          placeholder=\"Type Equity Name\"/>\n          <select name=\"timeSeries\" value={this.state.timeSeries}>\n            <option value=\"\">-- Please select a time series --</option>\n            <option value=\"Intraday\">Intraday</option>\n            <option value=\"Daily\">Daily</option>\n            <option value=\"Monthly\">Monthly</option>\n            <option value=\"Yearly\">Yearly</option>\n          </select>\n          <select name=\"dataType\">\n\n          </select>\n        </form>\n        <Plot className=\"plot\"\n        data={[\n          {\n            x: this.state.x_val,\n            y: this.state.y_val,\n            type: 'scatter',\n            mode: 'lines+markers',\n            marker: {color: 'red'},\n          },\n          {type: 'bar', x: 'Time', y: 'Highs'},\n        ]}\n        layout={ {width: 700, height: 500, title: 'A Fancy Plot'} }\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}